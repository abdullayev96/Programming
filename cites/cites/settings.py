"""
Django settings for cites project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-yjv8i*d4u@$9)$4(+xe@(^u4+bw1$sr%fgabh!&+@*!9k_v1j='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'university',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cites.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.joinpath("templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cites.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tashkent'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = 'static/'   #### tashqi tarafdan

STATIC_ROOT = BASE_DIR / 'HOME/static'

STATICFILES_DIRS=[BASE_DIR.joinpath("static")]

MEDIA_URL  = 'media/'
MEDIA_ROOT = BASE_DIR.joinpath('media')


### Base korish
#### python manage.py sqlmigrate university 0003



# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# (venv) D:\django\django_1\cites>python manage.py shell
# Python 3.9.5 (tags/v3.9.5:0a7dcbd, May  3 2021, 17:27:52) [MSC v.1928 64 bit (AMD64)] on win32
# Type "help", "copyright", "credits" or "license" for more information.
# (InteractiveConsole)
# >>> from university.models import Women
# >>> Women(title="Django or Flask ",  content = "Sergily")
# <Women: Django or Flask  || Sergily>
# >>> w1= _
# >>> w1
# <Women: Django or Flask  || Sergily>
# >>> w1.save()
# >>> w1
# <Women: Django or Flask  || Sergily>
# >>> w3=Women()
# >>> w3.title = "Good python than another programming languegaes
#   File "<console>", line 1
#     w3.title = "Good python than another programming languegaes
#                                                                ^
# SyntaxError: EOL while scanning string literal
# >>> w3.title = "Good python than another programming languegaes
#   File "<console>", line 1
#     w3.title = "Good python than another programming languegaes
#                                                                ^
# SyntaxError: EOL while scanning string literal
# >>> w.title = 'good python than another programming langueges'
# Traceback (most recent call last):
#   File "<console>", line 1, in <module>
# NameError: name 'w' is not defined
# >>> Women.objects
# <django.db.models.manager.Manager object at 0x000001AD262B2580>
# >>> w3=Women()
# >>> w3.title = 'good'
# >>> w3.content = 'boy'
# >>> w3.save()
# >>> w4= Women()
# >>> w4.title = 'how are you all teacher if you want to learn programming langueage'
# >>> w4.content = 'flask'
# >>> w4.save()
# >>> w5 = Women.objects.create(title= 'My father and mother', content= 'bro and siter')
# >>> Women.objects.create(title= 'My father and mother', content= 'bro and siter')
# <Women: My father and mother || bro and siter>
# >>> w5.pk
# r if you want to learn programming langueage || flask>, <Women: My father and mother || bro and siter>, <Women: My father and mother || bro and siter>]>
# >>> exit()

# python manage.py collectstatic


###############
# >>> from templatetags.models import *
# Traceback (most recent call last):
#   File "<console>", line 1, in <module>
# ModuleNotFoundError: No module named 'templatetags'
# >>> from university.models import *
# >>> Category.objects.create(name="Web dev")
# <Category: Web dev>
# >>> Category.objects.create(name="New Crm sistems")
# <Category: New Crm sistems>
# >>> Category.objects.filter(name="Web dev")
# <QuerySet [<Category: Web dev>]>
# >>> w_list=Women.objects.all()
# >>> w_list.update(cat_id=1)
# 2
# >>> w_list = update(cat_id=2)
# Traceback (most recent call last):
#   File "<console>", line 1, in <module>
# NameError: name 'update' is not defined
# >>> Women.title
# <django.db.models.query_utils.DeferredAttribute object at 0x000001934AB89EB0>
# >>> w1= Women(title='t1', content='c1', cat_id=2)
# >>> type(w1.title)
# <class 'str'>
# >>> type(w1.content)
# <class 'str'>
# >>> type(w1.cat_id)
# <class 'int'>
# >>> w5=Category
# >>> w5.update(id=1)
# Traceback (most recent call last):
#   File "<console>", line 1, in <module>
# AttributeError: type object 'Category' has no attribute 'update'
# >>> from django.db import connection
# >>> connection.queries
# [{'sql': 'INSERT INTO "university_category" ("name") VALUES (\'Web dev\') RETURNING "university_category"."id"', 'time': '0.000'}, {'sql': 'INSERT INTO
# "university_category" ("name") VALUES (\'New Crm sistems\') RETURNING "university_category"."id"', 'time': '0.000'}, {'sql': 'SELECT "university_categor
# y"."id", "university_category"."name" FROM "university_category" WHERE "university_category"."name" = \'Web dev\' LIMIT 21', 'time': '0.000'}, {'sql': '
# UPDATE "university_women" SET "cat_id" = 1', 'time': '0.016'}]
# >>> w2=Women.objects.get(pk=2)
# >>> connection.queries
# [{'sql': 'INSERT INTO "university_category" ("name") VALUES (\'Web dev\') RETURNING "university_category"."id"', 'time': '0.000'}, {'sql': 'INSERT INTO
# "university_category" ("name") VALUES (\'New Crm sistems\') RETURNING "university_category"."id"', 'time': '0.000'}, {'sql': 'SELECT "university_categor
# y"."id", "university_category"."name" FROM "university_category" WHERE "university_category"."name" = \'Web dev\' LIMIT 21', 'time': '0.000'}, {'sql': '
# UPDATE "university_women" SET "cat_id" = 1', 'time': '0.016'}, {'sql': 'SELECT "university_women"."id", "university_women"."title", "university_women"."
# content", "university_women"."image", "university_women"."time_create", "university_women"."time_update", "university_women"."is_published", "university
# _women"."cat_id" FROM "university_women" WHERE "university_women"."id" = 2 LIMIT 21', 'time': '0.000'}]
# >>> w2.title
# 'Php developer'
# >>> w2.content
# 'In the above example, the games table has a foreign key user_id containing the player ID, participating in the relevant games. Then, with this key, it
# will be possible to Link tables and get summary data from games and player data. Such a connection in English sounds like a relation, from where it came
#  from. the name of relational databases, that is, databases containing tables with the ability to communicate with each other. In the future, we will ta
# lk exclusively about these types of databases.'
# >>> w2.image
# <ImageFieldFile: images/2023/03/12/1_X9LCVf2XvmaYy0Agf-T2bw.png>
# >>> w2.cat
# <Category: Abdullayev Burhon>
# >>>



